#!/usr/bin/env python2.7

from contextlib import contextmanager
from time import time as now

import multiprocessing as mp
import subprocess as sp

import BaseHTTPServer
import SimpleHTTPServer
import logging
import os
import shutil
import socket
import sys
import tempfile
import time

SHELL='/bin/sh'
PORT = 8000
LOG_LEVEL = logging.WARN

logging.basicConfig(level=LOG_LEVEL)

def roll_name(active):
    ''' './data.0' -> './data.1'
    >>> roll_name('./data.0')
    './data.1'

    >>> roll_name('./data.1')
    './data.0'
    '''
    base, n = active.rsplit('.', 1)
    return '%s.%d' % (base, (int(n) + 1) % 2)

# doesn't work on wnidows
def force_symlink(target, name):
    os.system('/bin/ln -sf "%s" "%s"' % (target, name))

def run_cmd(workdir, cmd, out):
    # (cd $workdir && $SHELL -c "$cmd" ) > out
    p = sp.Popen([SHELL, '-c', cmd], shell=False, stdout=out, stderr=out, cwd=workdir)
    p.wait()
    return p.returncode

def sleep_neg(sec):
    if sec > 0.0:
        time.sleep(sec)

def update_worker(interval_s, workdir, cmd):
    log = logging.getLogger('update_worker')
    log.info('starting in %s', os.getcwd())

    # prepare
    force_symlink('./data.0', './data')

    # run update loop
    keep_going = True
    while keep_going:
        update_start = now()

        active = os.readlink('./data')
        shadow = roll_name(active)
        log.debug('active=%s, shadow=%s' % (active, shadow))

        r = run_cmd(workdir, cmd, open(shadow, 'w'))
        log.debug('\'%s\' returned %d', cmd, r);

        force_symlink(shadow, './data')

        # try to iterate with regular intervals
        sleep_neg(interval_s - (now() - update_start))

    # exit
    log.info('done')

@contextmanager
def tmpdir():
    path = os.path.join(tempfile.gettempdir(), 'wwwatch.' + str(os.getpid()))
    os.mkdir(path, 0700)

    try:
        yield path
    finally:
        try:
            shutil.rmtree(path)
        except IOError:
            sys.stderr.write('failed to clean up temp dir: ' + path)

class HTTPRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        self.log = logging.getLogger('HTTPRequestHandler')
        SimpleHTTPServer.SimpleHTTPRequestHandler.__init__(self, *args, **kwargs)

    def log_message(self, format, *args):
        self.log.debug("%s - - [%s] %s" %
                         (self.address_string(),
                          self.log_date_time_string(),
                          format%args))

def generate_index_htm(interval_s):
    update_url = './data'

    template = '''\
<html>
    <head>
        <style> * {{ font-family: monospace; }} </style>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>Refresh like mad</title>
        <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
        <script>
            $(document).ready(function() {{
                setInterval(update, ({interval_s}) * 1000);
                update();
            }});

            function update() {{
                $.ajax({{
                    url: "{update_url}",
                }}).done(function(data) {{
                    var out = $('#out');
                    out.html($('<pre>').text(data));
                }}).error(function(a,b,c) {{
                    var out = $('#out');
                    out.text("error getting update: " + b + ", " + c);
                }});
            }}
        </script>
    </head>
    <body>
        <div id="out"/>
    </body>
</html>
'''

    with open('./index.htm', 'w') as out:
        out.write(template.format(**locals()))

def main():
    log = logging.getLogger('main')

    interval_s = 1
    cmd = ' '.join(sys.argv[1:])
    oldcwd = os.getcwd()
    log.info('main(interval=%g, cwd=%s, cmd=%s)', interval_s, oldcwd, cmd)

    # prepare workdir
    with tmpdir() as workdir:
        os.chdir(workdir)
        log.info('workdir at %s', workdir)

        updater = mp.Process(target=update_worker, args=(interval_s, oldcwd, cmd))
        httpd = BaseHTTPServer.HTTPServer(('', PORT), HTTPRequestHandler)

        try:
            # run background updater
            updater.start()

            # generate index.htm
            generate_index_htm(interval_s)

            hostname = sp.check_output('/bin/hostname -f'.split()).strip()
            print 'wwwatching on http://%s:%s' % (hostname, PORT)

            # run webserver in foreground
            keep_going = True
            while keep_going:
                httpd.handle_request()

        finally:
            updater.terminate()
            updater.join()

    log.info('done')

def selftest():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '--test':
        selftest()
    else:
        main()
